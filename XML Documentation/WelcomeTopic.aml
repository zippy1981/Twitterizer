<?xml version="1.0" encoding="utf-8"?>
<topic id="10603e84-bf3e-400a-a04c-bffc15a0a560" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>The Twitterizer library aims to make Twitter integration as easy as possible.</para>
    </introduction>
    <section address="Purpose">
      <title>Purpose</title>
      <content>
        <para>This documentation should give you the technical specifications on the structure and use of the Twitterizer library.</para>
        <para>This is intended for developers with at least basic programming experience using any .NET language. Code examples should be included for methods that are regularly misunderstood, or that has usage that differs from the rest of the library.</para>
      </content>
    </section>
    <section address="WhereToStart">
      <title>Where to begin</title>
      <content>
        <para>Here are some useful things to remember when using the Twitterizer library:
        <list class="bullet">
          <listItem>You should never have the need to instantiate an object to execute a method.</listItem>
          <listItem>An overload is provided for each method that allows the smallest number of parameters to satisfy the requirements.</listItem>
          <listItem>Runtime configuration parameters are set by supplying an <codeEntityReference>T:Twitterizer.OptionalProperties</codeEntityReference> class, or a class that is derived from it.</listItem>
        </list></para>
        
        <para>Here are the high-level classes, the ones you will be most concerned with:
        
        <list class="bullet">
          <listItem><codeEntityReference>T:Twitterizer.OAuthUtility</codeEntityReference></listItem>
          <listItem><codeEntityReference>T:Twitterizer.TwitterUser</codeEntityReference></listItem>
          <listItem><codeEntityReference>T:Twitterizer.TwitterStatus</codeEntityReference></listItem>
          <listItem><codeEntityReference>T:Twitterizer.TwitterDirectMessage</codeEntityReference></listItem>
          <listItem><codeEntityReference>T:Twitterizer.TwitterList</codeEntityReference></listItem>
          <listItem><codeEntityReference>T:Twitterizer.TwitterSearch</codeEntityReference></listItem>
          <listItem><codeEntityReference>T:Twitterizer.TwitterFriendship</codeEntityReference></listItem>
          <listItem><codeEntityReference>T:Twitterizer.TwitterFavorite</codeEntityReference></listItem>
          <listItem><codeEntityReference>T:Twitterizer.TwitterTimeline</codeEntityReference></listItem>
        </list>
        </para>
        <para>To get a good feel of the 'best case' for our documentation effort, go look at the <codeEntityReference>M:Twitterizer.TwitterUser.Show(Twitterizer.OAuthTokens,System.String,Twitterizer.OptionalProperties)</codeEntityReference> method.</para>
      </content>
    </section>
    <relatedTopics>
    <externalLink>
    	<linkText>Official Twitterizer website</linkText>
    	<linkAlternateText>Go to Twitterizer.net</linkAlternateText>
    	<linkUri>http://www.twitterizer.net/</linkUri>
    </externalLink>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>